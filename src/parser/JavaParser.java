/* JavaParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. JavaParser.java */
package parser;

import java.io.*;

/**
 * Grammar to parse Java version 1.5
 * @author Sreenivasa Viswanadha - Simplified and enhanced for 1.5
 */
public class JavaParser/*@bgen(jjtree)*/implements JavaParserTreeConstants, JavaParserConstants {/*@bgen(jjtree)*/
  protected JJTJavaParserState jjtree = new JJTJavaParserState();/**
    * Class to hold modifiers.
    */
   static public final class ModifierSet
   {
     /* Definitions of the bits in the modifiers field.  */
     public static final int PUBLIC = 0x0001;
     public static final int PROTECTED = 0x0002;
     public static final int PRIVATE = 0x0004;
     public static final int ABSTRACT = 0x0008;
     public static final int STATIC = 0x0010;
     public static final int FINAL = 0x0020;
     public static final int SYNCHRONIZED = 0x0040;
     public static final int NATIVE = 0x0080;
     public static final int TRANSIENT = 0x0100;
     public static final int VOLATILE = 0x0200;
     public static final int STRICTFP = 0x1000;

     /** A set of accessors that indicate whether the specified modifier
         is in the set. */

     public boolean isPublic(int modifiers)
     {
       return (modifiers & PUBLIC) != 0;
     }

     public boolean isProtected(int modifiers)
     {
       return (modifiers & PROTECTED) != 0;
     }

     public boolean isPrivate(int modifiers)
     {
       return (modifiers & PRIVATE) != 0;
     }

     public boolean isStatic(int modifiers)
     {
       return (modifiers & STATIC) != 0;
     }

     public boolean isAbstract(int modifiers)
     {
       return (modifiers & ABSTRACT) != 0;
     }

     public boolean isFinal(int modifiers)
     {
       return (modifiers & FINAL) != 0;
     }

     public boolean isNative(int modifiers)
     {
       return (modifiers & NATIVE) != 0;
     }

     public boolean isStrictfp(int modifiers)
     {
       return (modifiers & STRICTFP) != 0;
     }

     public boolean isSynchronized(int modifiers)
     {
       return (modifiers & SYNCHRONIZED) != 0;
     }

     public boolean isTransient(int modifiers)
      {
       return (modifiers & TRANSIENT) != 0;
     }

     public boolean isVolatile(int modifiers)
     {
       return (modifiers & VOLATILE) != 0;
     }

     /**
      * Removes the given modifier.
      */
     static int removeModifier(int modifiers, int mod)
     {
        return modifiers & ~mod;
     }
   }

   public JavaParser(String fileName)
   {
      this(System.in);
      try { ReInit(new FileInputStream(new File(fileName))); }
      catch(Exception e) { e.printStackTrace();
      }
   }

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
  final public 
Node CompilationUnit() throws ParseException {/*@bgen(jjtree) CompilationUnit */
  ASTCompilationUnit jjtn000 = new ASTCompilationUnit(JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);// eventuali dichiarazioni

    try {
      if (jj_2_1(2147483647)) {
        PackageDeclaration();
      } else {
        ;
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IMPORT:{
          ;
          break;
          }
        default:
          break label_1;
        }
        ImportDeclaration();
      }
      label_2:
      while (true) {
        TypeDeclaration();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT:
        case CLASS:
        case ENUM:
        case FINAL:
        case INTERFACE:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOLATILE:
        case SEMICOLON:
        case AT:{
          ;
          break;
          }
        default:
          break label_2;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 127:{
        jj_consume_token(127);
        break;
        }
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STUFF_TO_IGNORE:{
        jj_consume_token(STUFF_TO_IGNORE);
        break;
        }
      default:
        ;
      }
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public void PackageDeclaration() throws ParseException {/*@bgen(jjtree) PackageDeclaration */
  ASTPackageDeclaration jjtn000 = new ASTPackageDeclaration(JJTPACKAGEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Modifiers();
      jj_consume_token(PACKAGE);
      Name();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void ImportDeclaration() throws ParseException {/*@bgen(jjtree) ImportDeclaration */
  ASTImportDeclaration jjtn000 = new ASTImportDeclaration(JJTIMPORTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IMPORT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STATIC:{
        jj_consume_token(STATIC);
        break;
        }
      default:
        ;
      }
      Name();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        jj_consume_token(DOT);
        jj_consume_token(STAR);
        break;
        }
      default:
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */
  final public 
int Modifiers() throws ParseException {/*@bgen(jjtree) Modifiers */
   ASTModifiers jjtn000 = new ASTModifiers(JJTMODIFIERS);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);int modifiers = 0;
    try {
      label_3:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLIC:{
          jj_consume_token(PUBLIC);
modifiers |= ModifierSet.PUBLIC;
          break;
          }
        case STATIC:{
          jj_consume_token(STATIC);
modifiers |= ModifierSet.STATIC;
          break;
          }
        case PROTECTED:{
          jj_consume_token(PROTECTED);
modifiers |= ModifierSet.PROTECTED;
          break;
          }
        case PRIVATE:{
          jj_consume_token(PRIVATE);
modifiers |= ModifierSet.PRIVATE;
          break;
          }
        case FINAL:{
          jj_consume_token(FINAL);
modifiers |= ModifierSet.FINAL;
          break;
          }
        case ABSTRACT:{
          jj_consume_token(ABSTRACT);
modifiers |= ModifierSet.ABSTRACT;
          break;
          }
        case SYNCHRONIZED:{
          jj_consume_token(SYNCHRONIZED);
modifiers |= ModifierSet.SYNCHRONIZED;
          break;
          }
        case NATIVE:{
          jj_consume_token(NATIVE);
modifiers |= ModifierSet.NATIVE;
          break;
          }
        case TRANSIENT:{
          jj_consume_token(TRANSIENT);
modifiers |= ModifierSet.TRANSIENT;
          break;
          }
        case VOLATILE:{
          jj_consume_token(VOLATILE);
modifiers |= ModifierSet.VOLATILE;
          break;
          }
        case STRICTFP:{
          jj_consume_token(STRICTFP);
modifiers |= ModifierSet.STRICTFP;
          break;
          }
        case AT:{
          Annotation();
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
{if ("" != null) return modifiers;}
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
}

/*
 * Declaration syntax follows.
 */
  final public void TypeDeclaration() throws ParseException {/*@bgen(jjtree) TypeDeclaration */
   ASTTypeDeclaration jjtn000 = new ASTTypeDeclaration(JJTTYPEDECLARATION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);int modifiers;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        jj_consume_token(SEMICOLON);
        break;
        }
      case ABSTRACT:
      case CLASS:
      case ENUM:
      case FINAL:
      case INTERFACE:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case AT:{
        modifiers = Modifiers();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CLASS:
        case INTERFACE:{
          ClassOrInterfaceDeclaration(modifiers);
          break;
          }
        case ENUM:{
          EnumDeclaration(modifiers);
          break;
          }
        case AT:{
          AnnotationTypeDeclaration(modifiers);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void ClassOrInterfaceDeclaration(int modifiers) throws ParseException {/*@bgen(jjtree) ClassOrInterfaceDeclaration */
   ASTClassOrInterfaceDeclaration jjtn000 = new ASTClassOrInterfaceDeclaration(JJTCLASSORINTERFACEDECLARATION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);boolean isInterface = false;
   Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLASS:{
        jj_consume_token(CLASS);
        break;
        }
      case INTERFACE:{
        jj_consume_token(INTERFACE);
isInterface = true;
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      t = jj_consume_token(IDENTIFIER);
jjtn000.setImage(t.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        TypeParameters();
        break;
        }
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTENDS:{
        ExtendsList(isInterface);
        break;
        }
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPLEMENTS:{
        ImplementsList(isInterface);
        break;
        }
      default:
        ;
      }
      ClassOrInterfaceBody(isInterface);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void ExtendsList(boolean isInterface) throws ParseException {/*@bgen(jjtree) ExtendsList */
   ASTExtendsList jjtn000 = new ASTExtendsList(JJTEXTENDSLIST);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);boolean extendsMoreThanOne = false;
    try {
      jj_consume_token(EXTENDS);
      ClassOrInterfaceType();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_4;
        }
        jj_consume_token(COMMA);
        ClassOrInterfaceType();
extendsMoreThanOne = true;
      }
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
if (extendsMoreThanOne && !isInterface)
         {if (true) throw new ParseException("A class cannot extend more than one other class");}
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  final public void ImplementsList(boolean isInterface) throws ParseException {/*@bgen(jjtree) ImplementsList */
  ASTImplementsList jjtn000 = new ASTImplementsList(JJTIMPLEMENTSLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IMPLEMENTS);
      ClassOrInterfaceType();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_5;
        }
        jj_consume_token(COMMA);
        ClassOrInterfaceType();
      }
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
if (isInterface)
         {if (true) throw new ParseException("An interface cannot implement other interfaces");}
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  final public void EnumDeclaration(int modifiers) throws ParseException {/*@bgen(jjtree) EnumDeclaration */
  ASTEnumDeclaration jjtn000 = new ASTEnumDeclaration(JJTENUMDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ENUM);
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPLEMENTS:{
        ImplementsList(false);
        break;
        }
      default:
        ;
      }
      EnumBody();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void EnumBody() throws ParseException {/*@bgen(jjtree) EnumBody */
  ASTEnumBody jjtn000 = new ASTEnumBody(JJTENUMBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:
      case AT:{
        EnumConstant();
        label_6:
        while (true) {
          if (jj_2_3(2)) {
            ;
          } else {
            break label_6;
          }
          jj_consume_token(COMMA);
          EnumConstant();
        }
        break;
        }
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        jj_consume_token(COMMA);
        break;
        }
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        jj_consume_token(SEMICOLON);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ABSTRACT:
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case CLASS:
          case DOUBLE:
          case ENUM:
          case FINAL:
          case FLOAT:
          case INT:
          case INTERFACE:
          case LONG:
          case NATIVE:
          case PRIVATE:
          case PROTECTED:
          case PUBLIC:
          case SHORT:
          case STATIC:
          case STRICTFP:
          case SYNCHRONIZED:
          case TRANSIENT:
          case VOID:
          case VOLATILE:
          case IDENTIFIER:
          case LBRACE:
          case SEMICOLON:
          case AT:
          case LT:{
            ;
            break;
            }
          default:
            break label_7;
          }
          ClassOrInterfaceBodyDeclaration(false);
        }
        break;
        }
      default:
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  final public void EnumConstant() throws ParseException {/*@bgen(jjtree) EnumConstant */
  ASTEnumConstant jjtn000 = new ASTEnumConstant(JJTENUMCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Modifiers();
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        Arguments();
        break;
        }
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:{
        ClassOrInterfaceBody(false);
        break;
        }
      default:
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void TypeParameters() throws ParseException {/*@bgen(jjtree) TypeParameters */
  ASTTypeParameters jjtn000 = new ASTTypeParameters(JJTTYPEPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LT);
      TypeParameter();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_8;
        }
        jj_consume_token(COMMA);
        TypeParameter();
      }
      jj_consume_token(GT);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  final public void TypeParameter() throws ParseException {/*@bgen(jjtree) TypeParameter */
  ASTTypeParameter jjtn000 = new ASTTypeParameter(JJTTYPEPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTENDS:{
        TypeBound();
        break;
        }
      default:
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  final public void TypeBound() throws ParseException {/*@bgen(jjtree) TypeBound */
  ASTTypeBound jjtn000 = new ASTTypeBound(JJTTYPEBOUND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EXTENDS);
      ClassOrInterfaceType();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BIT_AND:{
          ;
          break;
          }
        default:
          break label_9;
        }
        jj_consume_token(BIT_AND);
        ClassOrInterfaceType();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  final public void ClassOrInterfaceBody(boolean isInterface) throws ParseException {/*@bgen(jjtree) ClassOrInterfaceBody */
  ASTClassOrInterfaceBody jjtn000 = new ASTClassOrInterfaceBody(JJTCLASSORINTERFACEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case ENUM:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case IDENTIFIER:
        case LBRACE:
        case SEMICOLON:
        case AT:
        case LT:{
          ;
          break;
          }
        default:
          break label_10;
        }
        ClassOrInterfaceBodyDeclaration(isInterface);
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void ClassOrInterfaceBodyDeclaration(boolean isInterface) throws ParseException {/*@bgen(jjtree) ClassOrInterfaceBodyDeclaration */
   ASTClassOrInterfaceBodyDeclaration jjtn000 = new ASTClassOrInterfaceBodyDeclaration(JJTCLASSORINTERFACEBODYDECLARATION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);boolean isNestedInterface = false;
   int modifiers;
    try {
      if (jj_2_6(2)) {
        Initializer();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
if (isInterface)
        {if (true) throw new ParseException("An interface cannot have initializers");}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case ENUM:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case IDENTIFIER:
        case AT:
        case LT:{
          modifiers = Modifiers();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CLASS:
          case INTERFACE:{
            ClassOrInterfaceDeclaration(modifiers);
            break;
            }
          case ENUM:{
            EnumDeclaration(modifiers);
            break;
            }
          default:
            if (jj_2_4(2147483647)) {
              ConstructorDeclaration();
            } else if (jj_2_5(2147483647)) {
              FieldDeclaration(modifiers);
            } else {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case BOOLEAN:
              case BYTE:
              case CHAR:
              case DOUBLE:
              case FLOAT:
              case INT:
              case LONG:
              case SHORT:
              case VOID:
              case IDENTIFIER:
              case LT:{
                MethodDeclaration(modifiers);
                break;
                }
              case AT:{
                AnnotationTypeDeclaration(modifiers);
                break;
                }
              default:
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
          break;
          }
        case SEMICOLON:{
          jj_consume_token(SEMICOLON);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void FieldDeclaration(int modifiers) throws ParseException {/*@bgen(jjtree) FieldDeclaration */
  ASTFieldDeclaration jjtn000 = new ASTFieldDeclaration(JJTFIELDDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      VariableDeclarator();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_11;
        }
        jj_consume_token(COMMA);
        VariableDeclarator();
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void VariableDeclarator() throws ParseException {/*@bgen(jjtree) VariableDeclarator */
  ASTVariableDeclarator jjtn000 = new ASTVariableDeclarator(JJTVARIABLEDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      VariableDeclaratorId();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        VariableInitializer();
        break;
        }
      default:
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void VariableDeclaratorId() throws ParseException {/*@bgen(jjtree) VariableDeclaratorId */
 ASTVariableDeclaratorId jjtn000 = new ASTVariableDeclaratorId(JJTVARIABLEDECLARATORID);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtn000.setImage(t.image);  // Salva il nome del metodo

      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          ;
          break;
          }
        default:
          break label_12;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void VariableInitializer() throws ParseException {/*@bgen(jjtree) VariableInitializer */
  ASTVariableInitializer jjtn000 = new ASTVariableInitializer(JJTVARIABLEINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:{
        ArrayInitializer();
        break;
        }
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:{
        Expression();
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void ArrayInitializer() throws ParseException {/*@bgen(jjtree) ArrayInitializer */
  ASTArrayInitializer jjtn000 = new ASTArrayInitializer(JJTARRAYINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:{
        VariableInitializer();
        label_13:
        while (true) {
          if (jj_2_7(2)) {
            ;
          } else {
            break label_13;
          }
          jj_consume_token(COMMA);
          VariableInitializer();
        }
        break;
        }
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        jj_consume_token(COMMA);
        break;
        }
      default:
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void MethodDeclaration(int modifiers) throws ParseException {/*@bgen(jjtree) MethodDeclaration */
  ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        TypeParameters();
        break;
        }
      default:
        ;
      }
      ResultType();
      MethodDeclarator();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case THROWS:{
        jj_consume_token(THROWS);
        NameList();
        break;
        }
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:{
        Block();
        break;
        }
      case SEMICOLON:{
        jj_consume_token(SEMICOLON);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void MethodDeclarator() throws ParseException {/*@bgen(jjtree) MethodDeclarator */
  ASTMethodDeclarator jjtn000 = new ASTMethodDeclarator(JJTMETHODDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtn000.setImage(t.image);  // Salva il nome del metodo

      FormalParameters();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
        break;
        }
      default:
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void FormalParameters() throws ParseException {/*@bgen(jjtree) FormalParameters */
  ASTFormalParameters jjtn000 = new ASTFormalParameters(JJTFORMALPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:
      case AT:{
        FormalParameter();
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            break label_14;
          }
          jj_consume_token(COMMA);
          FormalParameter();
        }
        break;
        }
      default:
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void FormalParameter() throws ParseException {/*@bgen(jjtree) FormalParameter */
  ASTFormalParameter jjtn000 = new ASTFormalParameter(JJTFORMALPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Modifiers();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FINAL:
      case AT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FINAL:{
          jj_consume_token(FINAL);
          break;
          }
        case AT:{
          Annotation();
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        ;
      }
      Type();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELLIPSIS:{
        jj_consume_token(ELLIPSIS);
        break;
        }
      default:
        ;
      }
      VariableDeclaratorId();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void ConstructorDeclaration() throws ParseException {/*@bgen(jjtree) ConstructorDeclaration */
  ASTConstructorDeclaration jjtn000 = new ASTConstructorDeclaration(JJTCONSTRUCTORDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        TypeParameters();
        break;
        }
      default:
        ;
      }
      jj_consume_token(IDENTIFIER);
      FormalParameters();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case THROWS:{
        jj_consume_token(THROWS);
        NameList();
        break;
        }
      default:
        ;
      }
      jj_consume_token(LBRACE);
      if (jj_2_8(2147483647)) {
        ExplicitConstructorInvocation();
      } else {
        ;
      }
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT:
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case RETURN:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRANSIENT:
        case TRUE:
        case TRY:
        case VOID:
        case VOLATILE:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case AT:
        case INCR:
        case DECR:{
          ;
          break;
          }
        default:
          break label_15;
        }
        BlockStatement();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void ExplicitConstructorInvocation() throws ParseException {/*@bgen(jjtree) ExplicitConstructorInvocation */
  ASTExplicitConstructorInvocation jjtn000 = new ASTExplicitConstructorInvocation(JJTEXPLICITCONSTRUCTORINVOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          break label_16;
        }
        jj_consume_token(IDENTIFIER);
        jj_consume_token(DOT);
      }
      if (jj_2_9(2)) {
        jj_consume_token(THIS);
        jj_consume_token(DOT);
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        TypeArguments();
        break;
        }
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case THIS:{
        jj_consume_token(THIS);
        break;
        }
      case SUPER:{
        jj_consume_token(SUPER);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      Arguments();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void Initializer() throws ParseException {/*@bgen(jjtree) Initializer */
  ASTInitializer jjtn000 = new ASTInitializer(JJTINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STATIC:{
        jj_consume_token(STATIC);
        break;
        }
      default:
        ;
      }
      Block();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

/*
 * Type, name and expression syntax follows.
 */
  final public 
void Type() throws ParseException {/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_10(2)) {
        ReferenceType();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:{
          PrimitiveType();
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  final public void ReferenceType() throws ParseException {/*@bgen(jjtree) ReferenceType */
  ASTReferenceType jjtn000 = new ASTReferenceType(JJTREFERENCETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:{
        PrimitiveType();
        label_17:
        while (true) {
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
          if (jj_2_11(2)) {
            ;
          } else {
            break label_17;
          }
        }
        break;
        }
      case IDENTIFIER:{
        ClassOrInterfaceType();
        label_18:
        while (true) {
          if (jj_2_12(2)) {
            ;
          } else {
            break label_18;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
        }
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  final public void ClassOrInterfaceType() throws ParseException {/*@bgen(jjtree) ClassOrInterfaceType */
    ASTClassOrInterfaceType jjtn000 = new ASTClassOrInterfaceType(JJTCLASSORINTERFACETYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtn000.setImage(t.image);
      if (jj_2_13(2)) {
        TypeArguments();
      } else {
        ;
      }
      label_19:
      while (true) {
        if (jj_2_14(2)) {
          ;
        } else {
          break label_19;
        }
        jj_consume_token(DOT);
        t = jj_consume_token(IDENTIFIER);
jjtn000.setImage(t.image);
        if (jj_2_15(2)) {
          TypeArguments();
        } else {
          ;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void TypeArguments() throws ParseException {/*@bgen(jjtree) TypeArguments */
  ASTTypeArguments jjtn000 = new ASTTypeArguments(JJTTYPEARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LT);
      TypeArgument();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_20;
        }
        jj_consume_token(COMMA);
        TypeArgument();
      }
      jj_consume_token(GT);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  final public void TypeArgument() throws ParseException {/*@bgen(jjtree) TypeArgument */
  ASTTypeArgument jjtn000 = new ASTTypeArgument(JJTTYPEARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case IDENTIFIER:{
        ReferenceType();
        break;
        }
      case HOOK:{
        jj_consume_token(HOOK);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EXTENDS:
        case SUPER:{
          WildcardBounds();
          break;
          }
        default:
          ;
        }
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  final public void WildcardBounds() throws ParseException {/*@bgen(jjtree) WildcardBounds */
  ASTWildcardBounds jjtn000 = new ASTWildcardBounds(JJTWILDCARDBOUNDS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTENDS:{
        jj_consume_token(EXTENDS);
        ReferenceType();
        break;
        }
      case SUPER:{
        jj_consume_token(SUPER);
        ReferenceType();
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  final public void PrimitiveType() throws ParseException {/*@bgen(jjtree) PrimitiveType */
  ASTPrimitiveType jjtn000 = new ASTPrimitiveType(JJTPRIMITIVETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:{
        jj_consume_token(BOOLEAN);
        break;
        }
      case CHAR:{
        jj_consume_token(CHAR);
        break;
        }
      case BYTE:{
        jj_consume_token(BYTE);
        break;
        }
      case SHORT:{
        jj_consume_token(SHORT);
        break;
        }
      case INT:{
        jj_consume_token(INT);
        break;
        }
      case LONG:{
        jj_consume_token(LONG);
        break;
        }
      case FLOAT:{
        jj_consume_token(FLOAT);
        break;
        }
      case DOUBLE:{
        jj_consume_token(DOUBLE);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void ResultType() throws ParseException {/*@bgen(jjtree) ResultType */
  ASTResultType jjtn000 = new ASTResultType(JJTRESULTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VOID:{
        jj_consume_token(VOID);
        break;
        }
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case IDENTIFIER:{
        Type();
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void Name() throws ParseException {/*@bgen(jjtree) Name */
 ASTName jjtn000 = new ASTName(JJTNAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtn000.setImage(t.image);  // Salva il nome del metodo

      label_21:
      while (true) {
        if (jj_2_16(2)) {
          ;
        } else {
          break label_21;
        }
        jj_consume_token(DOT);
        t = jj_consume_token(IDENTIFIER);
jjtn000.setImage(t.image);  // Salva il nome del metodo

      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void NameList() throws ParseException {/*@bgen(jjtree) NameList */
  ASTNameList jjtn000 = new ASTNameList(JJTNAMELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Name();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_22;
        }
        jj_consume_token(COMMA);
        Name();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

/*
 * Expression syntax follows.
 */
  final public 
void Expression() throws ParseException {/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ConditionalExpression();
      if (jj_2_17(2)) {
        AssignmentOperator();
        Expression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void AssignmentOperator() throws ParseException {/*@bgen(jjtree) AssignmentOperator */
  ASTAssignmentOperator jjtn000 = new ASTAssignmentOperator(JJTASSIGNMENTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        break;
        }
      case STARASSIGN:{
        jj_consume_token(STARASSIGN);
        break;
        }
      case SLASHASSIGN:{
        jj_consume_token(SLASHASSIGN);
        break;
        }
      case REMASSIGN:{
        jj_consume_token(REMASSIGN);
        break;
        }
      case PLUSASSIGN:{
        jj_consume_token(PLUSASSIGN);
        break;
        }
      case MINUSASSIGN:{
        jj_consume_token(MINUSASSIGN);
        break;
        }
      case LSHIFTASSIGN:{
        jj_consume_token(LSHIFTASSIGN);
        break;
        }
      case RSIGNEDSHIFTASSIGN:{
        jj_consume_token(RSIGNEDSHIFTASSIGN);
        break;
        }
      case RUNSIGNEDSHIFTASSIGN:{
        jj_consume_token(RUNSIGNEDSHIFTASSIGN);
        break;
        }
      case ANDASSIGN:{
        jj_consume_token(ANDASSIGN);
        break;
        }
      case XORASSIGN:{
        jj_consume_token(XORASSIGN);
        break;
        }
      case ORASSIGN:{
        jj_consume_token(ORASSIGN);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void ConditionalExpression() throws ParseException {/*@bgen(jjtree) ConditionalExpression */
  ASTConditionalExpression jjtn000 = new ASTConditionalExpression(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ConditionalOrExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HOOK:{
        jj_consume_token(HOOK);
        Expression();
        jj_consume_token(COLON);
        Expression();
        break;
        }
      default:
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void ConditionalOrExpression() throws ParseException {/*@bgen(jjtree) ConditionalOrExpression */
  ASTConditionalOrExpression jjtn000 = new ASTConditionalOrExpression(JJTCONDITIONALOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ConditionalAndExpression();
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SC_OR:{
          ;
          break;
          }
        default:
          break label_23;
        }
        jj_consume_token(SC_OR);
        ConditionalAndExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void ConditionalAndExpression() throws ParseException {/*@bgen(jjtree) ConditionalAndExpression */
  ASTConditionalAndExpression jjtn000 = new ASTConditionalAndExpression(JJTCONDITIONALANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      InclusiveOrExpression();
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SC_AND:{
          ;
          break;
          }
        default:
          break label_24;
        }
        jj_consume_token(SC_AND);
        InclusiveOrExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void InclusiveOrExpression() throws ParseException {/*@bgen(jjtree) InclusiveOrExpression */
  ASTInclusiveOrExpression jjtn000 = new ASTInclusiveOrExpression(JJTINCLUSIVEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ExclusiveOrExpression();
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BIT_OR:{
          ;
          break;
          }
        default:
          break label_25;
        }
        jj_consume_token(BIT_OR);
        ExclusiveOrExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void ExclusiveOrExpression() throws ParseException {/*@bgen(jjtree) ExclusiveOrExpression */
  ASTExclusiveOrExpression jjtn000 = new ASTExclusiveOrExpression(JJTEXCLUSIVEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AndExpression();
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case XOR:{
          ;
          break;
          }
        default:
          break label_26;
        }
        jj_consume_token(XOR);
        AndExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void AndExpression() throws ParseException {/*@bgen(jjtree) AndExpression */
  ASTAndExpression jjtn000 = new ASTAndExpression(JJTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      EqualityExpression();
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BIT_AND:{
          ;
          break;
          }
        default:
          break label_27;
        }
        jj_consume_token(BIT_AND);
        EqualityExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void EqualityExpression() throws ParseException {/*@bgen(jjtree) EqualityExpression */
  ASTEqualityExpression jjtn000 = new ASTEqualityExpression(JJTEQUALITYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      InstanceOfExpression();
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:
        case NE:{
          ;
          break;
          }
        default:
          break label_28;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:{
          jj_consume_token(EQ);
          break;
          }
        case NE:{
          jj_consume_token(NE);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        InstanceOfExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void InstanceOfExpression() throws ParseException {/*@bgen(jjtree) InstanceOfExpression */
  ASTInstanceOfExpression jjtn000 = new ASTInstanceOfExpression(JJTINSTANCEOFEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      RelationalExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INSTANCEOF:{
        jj_consume_token(INSTANCEOF);
        Type();
        break;
        }
      default:
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void RelationalExpression() throws ParseException {/*@bgen(jjtree) RelationalExpression */
  ASTRelationalExpression jjtn000 = new ASTRelationalExpression(JJTRELATIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ShiftExpression();
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LT:
        case LE:
        case GE:
        case GT:{
          ;
          break;
          }
        default:
          break label_29;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LT:{
          jj_consume_token(LT);
          break;
          }
        case GT:{
          jj_consume_token(GT);
          break;
          }
        case LE:{
          jj_consume_token(LE);
          break;
          }
        case GE:{
          jj_consume_token(GE);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        ShiftExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void ShiftExpression() throws ParseException {/*@bgen(jjtree) ShiftExpression */
  ASTShiftExpression jjtn000 = new ASTShiftExpression(JJTSHIFTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AdditiveExpression();
      label_30:
      while (true) {
        if (jj_2_18(1)) {
          ;
        } else {
          break label_30;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LSHIFT:{
          jj_consume_token(LSHIFT);
          break;
          }
        default:
          if (jj_2_19(1)) {
            RSIGNEDSHIFT();
          } else if (jj_2_20(1)) {
            RUNSIGNEDSHIFT();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        AdditiveExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void AdditiveExpression() throws ParseException {/*@bgen(jjtree) AdditiveExpression */
  ASTAdditiveExpression jjtn000 = new ASTAdditiveExpression(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultiplicativeExpression();
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case MINUS:{
          ;
          break;
          }
        default:
          break label_31;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          jj_consume_token(PLUS);
          break;
          }
        case MINUS:{
          jj_consume_token(MINUS);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        MultiplicativeExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void MultiplicativeExpression() throws ParseException {/*@bgen(jjtree) MultiplicativeExpression */
  ASTMultiplicativeExpression jjtn000 = new ASTMultiplicativeExpression(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      UnaryExpression();
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STAR:
        case SLASH:
        case REM:{
          ;
          break;
          }
        default:
          break label_32;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STAR:{
          jj_consume_token(STAR);
          break;
          }
        case SLASH:{
          jj_consume_token(SLASH);
          break;
          }
        case REM:{
          jj_consume_token(REM);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        UnaryExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void UnaryExpression() throws ParseException {/*@bgen(jjtree) UnaryExpression */
  ASTUnaryExpression jjtn000 = new ASTUnaryExpression(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          jj_consume_token(PLUS);
          break;
          }
        case MINUS:{
          jj_consume_token(MINUS);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        UnaryExpression();
        break;
        }
      case INCR:{
        PreIncrementExpression();
        break;
        }
      case DECR:{
        PreDecrementExpression();
        break;
        }
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:{
        UnaryExpressionNotPlusMinus();
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void PreIncrementExpression() throws ParseException {/*@bgen(jjtree) PreIncrementExpression */
  ASTPreIncrementExpression jjtn000 = new ASTPreIncrementExpression(JJTPREINCREMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INCR);
      PrimaryExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void PreDecrementExpression() throws ParseException {/*@bgen(jjtree) PreDecrementExpression */
  ASTPreDecrementExpression jjtn000 = new ASTPreDecrementExpression(JJTPREDECREMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DECR);
      PrimaryExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void UnaryExpressionNotPlusMinus() throws ParseException {/*@bgen(jjtree) UnaryExpressionNotPlusMinus */
  ASTUnaryExpressionNotPlusMinus jjtn000 = new ASTUnaryExpressionNotPlusMinus(JJTUNARYEXPRESSIONNOTPLUSMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BANG:
      case TILDE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TILDE:{
          jj_consume_token(TILDE);
          break;
          }
        case BANG:{
          jj_consume_token(BANG);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        UnaryExpression();
        break;
        }
      default:
        if (jj_2_21(2147483647)) {
          CastExpression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FALSE:
          case FLOAT:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case SHORT:
          case SUPER:
          case THIS:
          case TRUE:
          case VOID:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:{
            PostfixExpression();
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
  final public void CastLookahead() throws ParseException {/*@bgen(jjtree) CastLookahead */
  ASTCastLookahead jjtn000 = new ASTCastLookahead(JJTCASTLOOKAHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_22(2)) {
        jj_consume_token(LPAREN);
        PrimitiveType();
      } else if (jj_2_23(2147483647)) {
        jj_consume_token(LPAREN);
        Type();
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          jj_consume_token(LPAREN);
          Type();
          jj_consume_token(RPAREN);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TILDE:{
            jj_consume_token(TILDE);
            break;
            }
          case BANG:{
            jj_consume_token(BANG);
            break;
            }
          case LPAREN:{
            jj_consume_token(LPAREN);
            break;
            }
          case IDENTIFIER:{
            jj_consume_token(IDENTIFIER);
            break;
            }
          case THIS:{
            jj_consume_token(THIS);
            break;
            }
          case SUPER:{
            jj_consume_token(SUPER);
            break;
            }
          case NEW:{
            jj_consume_token(NEW);
            break;
            }
          case FALSE:
          case NULL:
          case TRUE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:{
            Literal();
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void PostfixExpression() throws ParseException {/*@bgen(jjtree) PostfixExpression */
  ASTPostfixExpression jjtn000 = new ASTPostfixExpression(JJTPOSTFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PrimaryExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCR:
      case DECR:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INCR:{
          jj_consume_token(INCR);
          break;
          }
        case DECR:{
          jj_consume_token(DECR);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void CastExpression() throws ParseException {/*@bgen(jjtree) CastExpression */
  ASTCastExpression jjtn000 = new ASTCastExpression(JJTCASTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_24(2147483647)) {
        jj_consume_token(LPAREN);
        Type();
        jj_consume_token(RPAREN);
        UnaryExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          jj_consume_token(LPAREN);
          Type();
          jj_consume_token(RPAREN);
          UnaryExpressionNotPlusMinus();
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void PrimaryExpression() throws ParseException {/*@bgen(jjtree) PrimaryExpression */
  ASTPrimaryExpression jjtn000 = new ASTPrimaryExpression(JJTPRIMARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PrimaryPrefix();
      label_33:
      while (true) {
        if (jj_2_25(2)) {
          ;
        } else {
          break label_33;
        }
        PrimarySuffix();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void MemberSelector() throws ParseException {/*@bgen(jjtree) MemberSelector */
  ASTMemberSelector jjtn000 = new ASTMemberSelector(JJTMEMBERSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DOT);
      TypeArguments();
      jj_consume_token(IDENTIFIER);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void PrimaryPrefix() throws ParseException {/*@bgen(jjtree) PrimaryPrefix */
  ASTPrimaryPrefix jjtn000 = new ASTPrimaryPrefix(JJTPRIMARYPREFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE:
      case NULL:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:{
        Literal();
        break;
        }
      default:
        if (jj_2_26(2147483647)) {
          label_34:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case IDENTIFIER:{
              ;
              break;
              }
            default:
              break label_34;
            }
            jj_consume_token(IDENTIFIER);
            jj_consume_token(DOT);
          }
          jj_consume_token(THIS);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SUPER:{
            jj_consume_token(SUPER);
            jj_consume_token(DOT);
            jj_consume_token(IDENTIFIER);
            break;
            }
          default:
            if (jj_2_27(2147483647)) {
              ClassOrInterfaceType();
              jj_consume_token(DOT);
              jj_consume_token(SUPER);
              jj_consume_token(DOT);
              jj_consume_token(IDENTIFIER);
            } else {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case LPAREN:{
                jj_consume_token(LPAREN);
                Expression();
                jj_consume_token(RPAREN);
                break;
                }
              case NEW:{
                AllocationExpression();
                break;
                }
              default:
                if (jj_2_28(2147483647)) {
                  ResultType();
                  jj_consume_token(DOT);
                  jj_consume_token(CLASS);
                } else {
                  switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                  case IDENTIFIER:{
                    Name();
                    break;
                    }
                  default:
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
              }
            }
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void PrimarySuffix() throws ParseException {/*@bgen(jjtree) PrimarySuffix */
  ASTPrimarySuffix jjtn000 = new ASTPrimarySuffix(JJTPRIMARYSUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_29(2147483647)) {
        jj_consume_token(DOT);
        jj_consume_token(SUPER);
      } else if (jj_2_30(2147483647)) {
        jj_consume_token(DOT);
        jj_consume_token(THIS);
      } else if (jj_2_31(2)) {
        jj_consume_token(DOT);
        AllocationExpression();
      } else if (jj_2_32(3)) {
        MemberSelector();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          jj_consume_token(LBRACKET);
          Expression();
          jj_consume_token(RBRACKET);
          break;
          }
        case DOT:{
          jj_consume_token(DOT);
          jj_consume_token(IDENTIFIER);
          break;
          }
        case LPAREN:{
          Arguments();
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void Literal() throws ParseException {/*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:{
        jj_consume_token(INTEGER_LITERAL);
        break;
        }
      case FLOATING_POINT_LITERAL:{
        jj_consume_token(FLOATING_POINT_LITERAL);
        break;
        }
      case CHARACTER_LITERAL:{
        jj_consume_token(CHARACTER_LITERAL);
        break;
        }
      case STRING_LITERAL:{
        jj_consume_token(STRING_LITERAL);
        break;
        }
      case FALSE:
      case TRUE:{
        BooleanLiteral();
        break;
        }
      case NULL:{
        NullLiteral();
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void BooleanLiteral() throws ParseException {/*@bgen(jjtree) BooleanLiteral */
  ASTBooleanLiteral jjtn000 = new ASTBooleanLiteral(JJTBOOLEANLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:{
        jj_consume_token(TRUE);
        break;
        }
      case FALSE:{
        jj_consume_token(FALSE);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void NullLiteral() throws ParseException {/*@bgen(jjtree) NullLiteral */
  ASTNullLiteral jjtn000 = new ASTNullLiteral(JJTNULLLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NULL);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void Arguments() throws ParseException {/*@bgen(jjtree) Arguments */
  ASTArguments jjtn000 = new ASTArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:{
        ArgumentList();
        break;
        }
      default:
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void ArgumentList() throws ParseException {/*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      label_35:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_35;
        }
        jj_consume_token(COMMA);
        Expression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void AllocationExpression() throws ParseException {/*@bgen(jjtree) AllocationExpression */
  ASTAllocationExpression jjtn000 = new ASTAllocationExpression(JJTALLOCATIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_33(2)) {
        jj_consume_token(NEW);
        PrimitiveType();
        ArrayDimsAndInits();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:{
          jj_consume_token(NEW);
          ClassOrInterfaceType();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LT:{
            TypeArguments();
            break;
            }
          default:
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LBRACKET:{
            ArrayDimsAndInits();
            break;
            }
          case LPAREN:{
            Arguments();
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case LBRACE:{
              ClassOrInterfaceBody(false);
              break;
              }
            default:
              ;
            }
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
  final public void ArrayDimsAndInits() throws ParseException {/*@bgen(jjtree) ArrayDimsAndInits */
  ASTArrayDimsAndInits jjtn000 = new ASTArrayDimsAndInits(JJTARRAYDIMSANDINITS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_36(2)) {
        label_36:
        while (true) {
          jj_consume_token(LBRACKET);
          Expression();
          jj_consume_token(RBRACKET);
          if (jj_2_34(2)) {
            ;
          } else {
            break label_36;
          }
        }
        label_37:
        while (true) {
          if (jj_2_35(2)) {
            ;
          } else {
            break label_37;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          label_38:
          while (true) {
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case LBRACKET:{
              ;
              break;
              }
            default:
              break label_38;
            }
          }
          ArrayInitializer();
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

/*
 * Statement syntax follows.
 */
  final public 
void Statement() throws ParseException {/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_37(2)) {
        LabeledStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASSERT:{
          AssertStatement();
          break;
          }
        case LBRACE:{
          Block();
          break;
          }
        case SEMICOLON:{
          EmptyStatement();
          break;
          }
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:{
          StatementExpression();
          jj_consume_token(SEMICOLON);
          break;
          }
        case SWITCH:{
          SwitchStatement();
          break;
          }
        case IF:{
          IfStatement();
          break;
          }
        case WHILE:{
          WhileStatement();
          break;
          }
        case DO:{
          DoStatement();
          break;
          }
        case FOR:{
          ForStatement();
          break;
          }
        case BREAK:{
          BreakStatement();
          break;
          }
        case CONTINUE:{
          ContinueStatement();
          break;
          }
        case RETURN:{
          ReturnStatement();
          break;
          }
        case THROW:{
          ThrowStatement();
          break;
          }
        case SYNCHRONIZED:{
          SynchronizedStatement();
          break;
          }
        case TRY:{
          TryStatement();
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void AssertStatement() throws ParseException {/*@bgen(jjtree) AssertStatement */
  ASTAssertStatement jjtn000 = new ASTAssertStatement(JJTASSERTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ASSERT);
      Expression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COLON:{
        jj_consume_token(COLON);
        Expression();
        break;
        }
      default:
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void LabeledStatement() throws ParseException {/*@bgen(jjtree) LabeledStatement */
  ASTLabeledStatement jjtn000 = new ASTLabeledStatement(JJTLABELEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void Block() throws ParseException {/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      label_39:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT:
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case RETURN:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRANSIENT:
        case TRUE:
        case TRY:
        case VOID:
        case VOLATILE:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case AT:
        case INCR:
        case DECR:{
          ;
          break;
          }
        default:
          break label_39;
        }
        BlockStatement();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void BlockStatement() throws ParseException {/*@bgen(jjtree) BlockStatement */
  ASTBlockStatement jjtn000 = new ASTBlockStatement(JJTBLOCKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_38(2147483647)) {
        LocalVariableDeclaration();
        jj_consume_token(SEMICOLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case RETURN:
        case SHORT:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:{
          Statement();
          break;
          }
        case CLASS:
        case INTERFACE:{
          ClassOrInterfaceDeclaration(0);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void LocalVariableDeclaration() throws ParseException {/*@bgen(jjtree) LocalVariableDeclaration */
  ASTLocalVariableDeclaration jjtn000 = new ASTLocalVariableDeclaration(JJTLOCALVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Modifiers();
      Type();
      VariableDeclarator();
      label_40:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_40;
        }
        jj_consume_token(COMMA);
        VariableDeclarator();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void EmptyStatement() throws ParseException {/*@bgen(jjtree) EmptyStatement */
  ASTEmptyStatement jjtn000 = new ASTEmptyStatement(JJTEMPTYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SEMICOLON);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void StatementExpression() throws ParseException {/*@bgen(jjtree) StatementExpression */
  ASTStatementExpression jjtn000 = new ASTStatementExpression(JJTSTATEMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCR:{
        PreIncrementExpression();
        break;
        }
      case DECR:{
        PreDecrementExpression();
        break;
        }
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:{
        PrimaryExpression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASSIGN:
        case INCR:
        case DECR:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case ANDASSIGN:
        case ORASSIGN:
        case XORASSIGN:
        case REMASSIGN:
        case LSHIFTASSIGN:
        case RSIGNEDSHIFTASSIGN:
        case RUNSIGNEDSHIFTASSIGN:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INCR:{
            jj_consume_token(INCR);
            break;
            }
          case DECR:{
            jj_consume_token(DECR);
            break;
            }
          case ASSIGN:
          case PLUSASSIGN:
          case MINUSASSIGN:
          case STARASSIGN:
          case SLASHASSIGN:
          case ANDASSIGN:
          case ORASSIGN:
          case XORASSIGN:
          case REMASSIGN:
          case LSHIFTASSIGN:
          case RSIGNEDSHIFTASSIGN:
          case RUNSIGNEDSHIFTASSIGN:{
            AssignmentOperator();
            Expression();
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          ;
        }
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void SwitchStatement() throws ParseException {/*@bgen(jjtree) SwitchStatement */
  ASTSwitchStatement jjtn000 = new ASTSwitchStatement(JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      label_41:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CASE:
        case _DEFAULT:{
          ;
          break;
          }
        default:
          break label_41;
        }
        SwitchLabel();
        label_42:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ABSTRACT:
          case ASSERT:
          case BOOLEAN:
          case BREAK:
          case BYTE:
          case CHAR:
          case CLASS:
          case CONTINUE:
          case DO:
          case DOUBLE:
          case FALSE:
          case FINAL:
          case FLOAT:
          case FOR:
          case IF:
          case INT:
          case INTERFACE:
          case LONG:
          case NATIVE:
          case NEW:
          case NULL:
          case PRIVATE:
          case PROTECTED:
          case PUBLIC:
          case RETURN:
          case SHORT:
          case STATIC:
          case STRICTFP:
          case SUPER:
          case SWITCH:
          case SYNCHRONIZED:
          case THIS:
          case THROW:
          case TRANSIENT:
          case TRUE:
          case TRY:
          case VOID:
          case VOLATILE:
          case WHILE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case LBRACE:
          case SEMICOLON:
          case AT:
          case INCR:
          case DECR:{
            ;
            break;
            }
          default:
            break label_42;
          }
          BlockStatement();
        }
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void SwitchLabel() throws ParseException {/*@bgen(jjtree) SwitchLabel */
  ASTSwitchLabel jjtn000 = new ASTSwitchLabel(JJTSWITCHLABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CASE:{
        jj_consume_token(CASE);
        Expression();
        jj_consume_token(COLON);
        break;
        }
      case _DEFAULT:{
        jj_consume_token(_DEFAULT);
        jj_consume_token(COLON);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void IfStatement() throws ParseException {/*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Statement();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE:{
        jj_consume_token(ELSE);
        Statement();
        break;
        }
      default:
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void WhileStatement() throws ParseException {/*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void DoStatement() throws ParseException {/*@bgen(jjtree) DoStatement */
  ASTDoStatement jjtn000 = new ASTDoStatement(JJTDOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DO);
      Statement();
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void ForStatement() throws ParseException {/*@bgen(jjtree) ForStatement */
  ASTForStatement jjtn000 = new ASTForStatement(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      jj_consume_token(LPAREN);
      if (jj_2_39(2147483647)) {
        Modifiers();
        Type();
        jj_consume_token(IDENTIFIER);
        jj_consume_token(COLON);
        Expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case NATIVE:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SUPER:
        case SYNCHRONIZED:
        case THIS:
        case TRANSIENT:
        case TRUE:
        case VOID:
        case VOLATILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case SEMICOLON:
        case AT:
        case INCR:
        case DECR:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ABSTRACT:
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FALSE:
          case FINAL:
          case FLOAT:
          case INT:
          case LONG:
          case NATIVE:
          case NEW:
          case NULL:
          case PRIVATE:
          case PROTECTED:
          case PUBLIC:
          case SHORT:
          case STATIC:
          case STRICTFP:
          case SUPER:
          case SYNCHRONIZED:
          case THIS:
          case TRANSIENT:
          case TRUE:
          case VOID:
          case VOLATILE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case AT:
          case INCR:
          case DECR:{
            ForInit();
            break;
            }
          default:
            ;
          }
          jj_consume_token(SEMICOLON);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FALSE:
          case FLOAT:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case SHORT:
          case SUPER:
          case THIS:
          case TRUE:
          case VOID:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case BANG:
          case TILDE:
          case INCR:
          case DECR:
          case PLUS:
          case MINUS:{
            Expression();
            break;
            }
          default:
            ;
          }
          jj_consume_token(SEMICOLON);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FALSE:
          case FLOAT:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case SHORT:
          case SUPER:
          case THIS:
          case TRUE:
          case VOID:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case INCR:
          case DECR:{
            ForUpdate();
            break;
            }
          default:
            ;
          }
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RPAREN);
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void ForInit() throws ParseException {/*@bgen(jjtree) ForInit */
  ASTForInit jjtn000 = new ASTForInit(JJTFORINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_40(2147483647)) {
        LocalVariableDeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:{
          StatementExpressionList();
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void StatementExpressionList() throws ParseException {/*@bgen(jjtree) StatementExpressionList */
  ASTStatementExpressionList jjtn000 = new ASTStatementExpressionList(JJTSTATEMENTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      StatementExpression();
      label_43:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_43;
        }
        jj_consume_token(COMMA);
        StatementExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void ForUpdate() throws ParseException {/*@bgen(jjtree) ForUpdate */
  ASTForUpdate jjtn000 = new ASTForUpdate(JJTFORUPDATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      StatementExpressionList();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void BreakStatement() throws ParseException {/*@bgen(jjtree) BreakStatement */
  ASTBreakStatement jjtn000 = new ASTBreakStatement(JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BREAK);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        jj_consume_token(IDENTIFIER);
        break;
        }
      default:
        ;
      }
      jj_consume_token(SEMICOLON);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void ContinueStatement() throws ParseException {/*@bgen(jjtree) ContinueStatement */
  ASTContinueStatement jjtn000 = new ASTContinueStatement(JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CONTINUE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        jj_consume_token(IDENTIFIER);
        break;
        }
      default:
        ;
      }
      jj_consume_token(SEMICOLON);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void ReturnStatement() throws ParseException {/*@bgen(jjtree) ReturnStatement */
  ASTReturnStatement jjtn000 = new ASTReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:{
        Expression();
        break;
        }
      default:
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void ThrowStatement() throws ParseException {/*@bgen(jjtree) ThrowStatement */
  ASTThrowStatement jjtn000 = new ASTThrowStatement(JJTTHROWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(THROW);
      Expression();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void SynchronizedStatement() throws ParseException {/*@bgen(jjtree) SynchronizedStatement */
  ASTSynchronizedStatement jjtn000 = new ASTSynchronizedStatement(JJTSYNCHRONIZEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SYNCHRONIZED);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Block();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void TryStatement() throws ParseException {/*@bgen(jjtree) TryStatement */
  ASTTryStatement jjtn000 = new ASTTryStatement(JJTTRYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TRY);
      Block();
      label_44:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CATCH:{
          ;
          break;
          }
        default:
          break label_44;
        }
        jj_consume_token(CATCH);
        jj_consume_token(LPAREN);
        FormalParameter();
        jj_consume_token(RPAREN);
        Block();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FINALLY:{
        jj_consume_token(FINALLY);
        Block();
        break;
        }
      default:
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */
  final public 
void RUNSIGNEDSHIFT() throws ParseException {/*@bgen(jjtree) RUNSIGNEDSHIFT */
  ASTRUNSIGNEDSHIFT jjtn000 = new ASTRUNSIGNEDSHIFT(JJTRUNSIGNEDSHIFT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (getToken(1).kind == GT &&
                      ((MyToken)getToken(1)).realKind == RUNSIGNEDSHIFT) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(GT);
      jj_consume_token(GT);
      jj_consume_token(GT);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void RSIGNEDSHIFT() throws ParseException {/*@bgen(jjtree) RSIGNEDSHIFT */
  ASTRSIGNEDSHIFT jjtn000 = new ASTRSIGNEDSHIFT(JJTRSIGNEDSHIFT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (getToken(1).kind == GT &&
                      ((MyToken)getToken(1)).realKind == RSIGNEDSHIFT) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(GT);
      jj_consume_token(GT);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

/* Annotation syntax follows. */
  final public 
void Annotation() throws ParseException {/*@bgen(jjtree) Annotation */
  ASTAnnotation jjtn000 = new ASTAnnotation(JJTANNOTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_41(2147483647)) {
        NormalAnnotation();
      } else if (jj_2_42(2147483647)) {
        SingleMemberAnnotation();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AT:{
          MarkerAnnotation();
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  final public void NormalAnnotation() throws ParseException {/*@bgen(jjtree) NormalAnnotation */
  ASTNormalAnnotation jjtn000 = new ASTNormalAnnotation(JJTNORMALANNOTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(AT);
      Name();
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        MemberValuePairs();
        break;
        }
      default:
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  final public void MarkerAnnotation() throws ParseException {/*@bgen(jjtree) MarkerAnnotation */
  ASTMarkerAnnotation jjtn000 = new ASTMarkerAnnotation(JJTMARKERANNOTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(AT);
      Name();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void SingleMemberAnnotation() throws ParseException {/*@bgen(jjtree) SingleMemberAnnotation */
  ASTSingleMemberAnnotation jjtn000 = new ASTSingleMemberAnnotation(JJTSINGLEMEMBERANNOTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(AT);
      Name();
      jj_consume_token(LPAREN);
      MemberValue();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void MemberValuePairs() throws ParseException {/*@bgen(jjtree) MemberValuePairs */
  ASTMemberValuePairs jjtn000 = new ASTMemberValuePairs(JJTMEMBERVALUEPAIRS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MemberValuePair();
      label_45:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_45;
        }
        jj_consume_token(COMMA);
        MemberValuePair();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  final public void MemberValuePair() throws ParseException {/*@bgen(jjtree) MemberValuePair */
  ASTMemberValuePair jjtn000 = new ASTMemberValuePair(JJTMEMBERVALUEPAIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(ASSIGN);
      MemberValue();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void MemberValue() throws ParseException {/*@bgen(jjtree) MemberValue */
  ASTMemberValue jjtn000 = new ASTMemberValue(JJTMEMBERVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AT:{
        Annotation();
        break;
        }
      case LBRACE:{
        MemberValueArrayInitializer();
        break;
        }
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:{
        ConditionalExpression();
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  final public void MemberValueArrayInitializer() throws ParseException {/*@bgen(jjtree) MemberValueArrayInitializer */
  ASTMemberValueArrayInitializer jjtn000 = new ASTMemberValueArrayInitializer(JJTMEMBERVALUEARRAYINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case AT:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:{
        MemberValue();
        label_46:
        while (true) {
          if (jj_2_43(2)) {
            ;
          } else {
            break label_46;
          }
          jj_consume_token(COMMA);
          MemberValue();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          jj_consume_token(COMMA);
          break;
          }
        default:
          ;
        }
        break;
        }
      default:
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

/* Annotation Types. */
  final public 
void AnnotationTypeDeclaration(int modifiers) throws ParseException {/*@bgen(jjtree) AnnotationTypeDeclaration */
  ASTAnnotationTypeDeclaration jjtn000 = new ASTAnnotationTypeDeclaration(JJTANNOTATIONTYPEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(AT);
      jj_consume_token(INTERFACE);
      jj_consume_token(IDENTIFIER);
      AnnotationTypeBody();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void AnnotationTypeBody() throws ParseException {/*@bgen(jjtree) AnnotationTypeBody */
  ASTAnnotationTypeBody jjtn000 = new ASTAnnotationTypeBody(JJTANNOTATIONTYPEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      label_47:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case ENUM:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOLATILE:
        case IDENTIFIER:
        case SEMICOLON:
        case AT:{
          ;
          break;
          }
        default:
          break label_47;
        }
        AnnotationTypeMemberDeclaration();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void AnnotationTypeMemberDeclaration() throws ParseException {/*@bgen(jjtree) AnnotationTypeMemberDeclaration */
   ASTAnnotationTypeMemberDeclaration jjtn000 = new ASTAnnotationTypeMemberDeclaration(JJTANNOTATIONTYPEMEMBERDECLARATION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);int modifiers;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:
      case AT:{
        modifiers = Modifiers();
        if (jj_2_44(2147483647)) {
          Type();
          jj_consume_token(IDENTIFIER);
          jj_consume_token(LPAREN);
          jj_consume_token(RPAREN);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case _DEFAULT:{
            DefaultValue();
            break;
            }
          default:
            ;
          }
          jj_consume_token(SEMICOLON);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CLASS:
          case INTERFACE:{
            ClassOrInterfaceDeclaration(modifiers);
            break;
            }
          case ENUM:{
            EnumDeclaration(modifiers);
            break;
            }
          case AT:{
            AnnotationTypeDeclaration(modifiers);
            break;
            }
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case INT:
          case LONG:
          case SHORT:
          case IDENTIFIER:{
            FieldDeclaration(modifiers);
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      case SEMICOLON:{
        jj_consume_token(SEMICOLON);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
}

  final public void DefaultValue() throws ParseException {/*@bgen(jjtree) DefaultValue */
  ASTDefaultValue jjtn000 = new ASTDefaultValue(JJTDEFAULTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(_DEFAULT);
      MemberValue();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_20()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_21()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_22()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_23()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_24()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_25()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_26()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_27()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_28()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_29()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_30()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_31()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_32()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_33()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_34()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_35()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_36()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_37()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_38()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_39()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_40()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_41()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_42()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_43()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_44()); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_3R_InstanceOfExpression_1529_3_198()
 {
    if (jj_3R_RelationalExpression_1535_3_203()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_InstanceOfExpression_1529_28_220()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ExclusiveOrExpression_1511_21_205()
 {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_AndExpression_1517_3_174()) return true;
    return false;
  }

  private boolean jj_3R_ConditionalAndExpression_1499_29_197()
 {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_InclusiveOrExpression_1505_3_142()) return true;
    return false;
  }

  private boolean jj_3R_EqualityExpression_1523_3_193()
 {
    if (jj_3R_InstanceOfExpression_1529_3_198()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_EqualityExpression_1523_28_218()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ConditionalOrExpression_1493_32_192()
 {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_ConditionalAndExpression_1499_3_134()) return true;
    return false;
  }

  private boolean jj_3R_AndExpression_1517_3_174()
 {
    if (jj_3R_EqualityExpression_1523_3_193()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_AndExpression_1517_26_215()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ConditionalExpression_1487_31_173()
 {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_Expression_1471_3_71()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_Expression_1471_3_71()) return true;
    return false;
  }

  private boolean jj_3R_ExclusiveOrExpression_1511_3_151()
 {
    if (jj_3R_AndExpression_1517_3_174()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExclusiveOrExpression_1511_21_205()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_InclusiveOrExpression_1505_3_142()
 {
    if (jj_3R_ExclusiveOrExpression_1511_3_151()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_InclusiveOrExpression_1505_29_202()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ConditionalAndExpression_1499_3_134()
 {
    if (jj_3R_InclusiveOrExpression_1505_3_142()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ConditionalAndExpression_1499_29_197()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ConditionalOrExpression_1493_3_124()
 {
    if (jj_3R_ConditionalAndExpression_1499_3_134()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ConditionalOrExpression_1493_32_192()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ConditionalExpression_1487_3_99()
 {
    if (jj_3R_ConditionalOrExpression_1493_3_124()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ConditionalExpression_1487_31_173()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_AssignmentOperator_1481_3_70()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_AssignmentOperator_1481_3_70()) return true;
    if (jj_3R_Expression_1471_3_71()) return true;
    return false;
  }

  private boolean jj_3R_Expression_1471_3_71()
 {
    if (jj_3R_ConditionalExpression_1487_3_99()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_NameList_1451_12_293()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Name_1439_3_84()) return true;
    return false;
  }

  private boolean jj_3R_NameList_1451_3_283()
 {
    if (jj_3R_Name_1439_3_84()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_NameList_1451_12_293()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_Name_1439_3_84()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ResultType_1427_3_109()
 {
    if (jj_3R_Type_1353_4_63()) return true;
    return false;
  }

  private boolean jj_3R_ResultType_1425_3_79()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_3R_ResultType_1427_3_109()) return true;
    }
    return false;
  }

  private boolean jj_3R_PrimitiveType_1405_3_75()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_TypeArguments_1382_25_132()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_TypeArgument_1388_4_98()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_TypeArguments_1382_4_69()) return true;
    return false;
  }

  private boolean jj_3R_WildcardBounds_1398_4_191()
 {
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_ReferenceType_1361_4_68()) return true;
    return false;
  }

  private boolean jj_3R_TypeArgument_1390_10_150()
 {
    if (jj_3R_WildcardBounds_1396_4_172()) return true;
    return false;
  }

  private boolean jj_3R_WildcardBounds_1396_4_172()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_WildcardBounds_1396_4_190()) {
    jj_scanpos = xsp;
    if (jj_3R_WildcardBounds_1398_4_191()) return true;
    }
    return false;
  }

  private boolean jj_3R_WildcardBounds_1396_4_190()
 {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_ReferenceType_1361_4_68()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_TypeArgument_1390_4_123()
 {
    if (jj_scan_token(HOOK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TypeArgument_1390_10_150()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_TypeArgument_1388_4_122()
 {
    if (jj_3R_ReferenceType_1361_4_68()) return true;
    return false;
  }

  private boolean jj_3R_TypeArgument_1388_4_98()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TypeArgument_1388_4_122()) {
    jj_scanpos = xsp;
    if (jj_3R_TypeArgument_1390_4_123()) return true;
    }
    return false;
  }

  private boolean jj_3R_TypeArguments_1382_4_69()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_TypeArgument_1388_4_98()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_TypeArguments_1382_25_132()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_3R_TypeArguments_1382_4_69()) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceType_1371_3_78()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ReferenceType_1363_4_97()
 {
    if (jj_3R_ClassOrInterfaceType_1371_3_78()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ReferenceType_1361_4_96()
 {
    if (jj_3R_PrimitiveType_1405_3_75()) return true;
    Token xsp;
    if (jj_3_11()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ReferenceType_1361_4_68()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ReferenceType_1361_4_96()) {
    jj_scanpos = xsp;
    if (jj_3R_ReferenceType_1363_4_97()) return true;
    }
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(THIS)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_ConstructorDeclaration_1323_37_268()
 {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_NameList_1451_3_283()) return true;
    return false;
  }

  private boolean jj_3R_Type_1355_4_89()
 {
    if (jj_3R_PrimitiveType_1405_3_75()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_ReferenceType_1361_4_68()) return true;
    return false;
  }

  private boolean jj_3R_Type_1353_4_63()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_Type_1355_4_89()) return true;
    }
    return false;
  }

  private boolean jj_3R_AnnotationTypeMemberDeclaration_2078_34_307()
 {
    if (jj_3R_DefaultValue_2095_3_316()) return true;
    return false;
  }

  private boolean jj_3R_Initializer_1342_3_65()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) jj_scanpos = xsp;
    if (jj_3R_Block_1808_3_90()) return true;
    return false;
  }

  private boolean jj_3R_FormalParameter_1315_27_301()
 {
    if (jj_3R_Annotation_2000_4_87()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_ExplicitConstructorInvocation_1335_3_67()) return true;
    return false;
  }

  private boolean jj_3R_ExplicitConstructorInvocation_1336_5_94()
 {
    if (jj_3R_TypeArguments_1382_4_69()) return true;
    return false;
  }

  private boolean jj_3R_ExplicitConstructorInvocation_1335_5_93()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_ExplicitConstructorInvocation_1335_3_67()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExplicitConstructorInvocation_1335_5_93()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_9()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExplicitConstructorInvocation_1336_5_94()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    if (jj_3R_Arguments_1715_3_95()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_FormalParameters_1306_29_292()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_FormalParameter_1312_3_291()) return true;
    return false;
  }

  private boolean jj_3R_ConstructorDeclaration_1328_7_270()
 {
    if (jj_3R_BlockStatement_1814_3_131()) return true;
    return false;
  }

  private boolean jj_3R_FormalParameter_1315_17_298()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_3R_FormalParameter_1315_27_301()) return true;
    }
    return false;
  }

  private boolean jj_3R_ConstructorDeclaration_1325_7_269()
 {
    if (jj_3R_ExplicitConstructorInvocation_1335_3_67()) return true;
    return false;
  }

  private boolean jj_3R_DefaultValue_2095_3_316()
 {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_3R_MemberValue_2042_4_86()) return true;
    return false;
  }

  private boolean jj_3R_ConstructorDeclaration_1321_5_266()
 {
    if (jj_3R_TypeParameters_1188_4_88()) return true;
    return false;
  }

  private boolean jj_3R_ConstructorDeclaration_1321_3_257()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ConstructorDeclaration_1321_5_266()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_FormalParameters_1306_3_267()) return true;
    xsp = jj_scanpos;
    if (jj_3R_ConstructorDeclaration_1323_37_268()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_ConstructorDeclaration_1325_7_269()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ConstructorDeclaration_1328_7_270()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_44()
 {
    if (jj_3R_Type_1353_4_63()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_AnnotationTypeMemberDeclaration_2086_4_306()
 {
    if (jj_3R_FieldDeclaration_1246_3_258()) return true;
    return false;
  }

  private boolean jj_3R_AnnotationTypeMemberDeclaration_2084_4_305()
 {
    if (jj_3R_AnnotationTypeDeclaration_2061_3_260()) return true;
    return false;
  }

  private boolean jj_3R_AnnotationTypeMemberDeclaration_2082_4_304()
 {
    if (jj_3R_EnumDeclaration_1164_3_256()) return true;
    return false;
  }

  private boolean jj_3R_AnnotationTypeMemberDeclaration_2080_4_303()
 {
    if (jj_3R_ClassOrInterfaceDeclaration_1126_3_149()) return true;
    return false;
  }

  private boolean jj_3R_FormalParameter_1312_3_291()
 {
    if (jj_3R_Modifiers_1065_2_83()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FormalParameter_1315_17_298()) jj_scanpos = xsp;
    if (jj_3R_Type_1353_4_63()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(123)) jj_scanpos = xsp;
    if (jj_3R_VariableDeclaratorId_1261_3_284()) return true;
    return false;
  }

  private boolean jj_3R_FormalParameters_1306_9_282()
 {
    if (jj_3R_FormalParameter_1312_3_291()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_FormalParameters_1306_29_292()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_AnnotationTypeMemberDeclaration_2077_4_302()
 {
    if (jj_3R_Type_1353_4_63()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AnnotationTypeMemberDeclaration_2078_34_307()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_AnnotationTypeMemberDeclaration_2075_2_299()
 {
    if (jj_3R_Modifiers_1065_2_83()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AnnotationTypeMemberDeclaration_2077_4_302()) {
    jj_scanpos = xsp;
    if (jj_3R_AnnotationTypeMemberDeclaration_2080_4_303()) {
    jj_scanpos = xsp;
    if (jj_3R_AnnotationTypeMemberDeclaration_2082_4_304()) {
    jj_scanpos = xsp;
    if (jj_3R_AnnotationTypeMemberDeclaration_2084_4_305()) {
    jj_scanpos = xsp;
    if (jj_3R_AnnotationTypeMemberDeclaration_2086_4_306()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_AnnotationTypeMemberDeclaration_2075_2_295()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AnnotationTypeMemberDeclaration_2075_2_299()) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) return true;
    }
    return false;
  }

  private boolean jj_3R_MethodDeclaration_1286_24_275()
 {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_NameList_1451_3_283()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_VariableInitializer_1269_3_66()) return true;
    return false;
  }

  private boolean jj_3R_AnnotationTypeBody_2067_9_287()
 {
    if (jj_3R_AnnotationTypeMemberDeclaration_2075_2_295()) return true;
    return false;
  }

  private boolean jj_3R_FormalParameters_1306_3_267()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FormalParameters_1306_9_282()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_43()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_MemberValue_2042_4_86()) return true;
    return false;
  }

  private boolean jj_3R_MethodDeclarator_1299_5_286()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_AnnotationTypeBody_2067_3_277()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_AnnotationTypeBody_2067_9_287()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_MethodDeclarator_1295_3_274()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_FormalParameters_1306_3_267()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MethodDeclarator_1299_5_286()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_AnnotationTypeDeclaration_2061_3_260()
 {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_AnnotationTypeBody_2067_3_277()) return true;
    return false;
  }

  private boolean jj_3R_MemberValueArrayInitializer_2052_8_175()
 {
    if (jj_3R_MemberValue_2042_4_86()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_43()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(86)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_MethodDeclaration_1287_5_276()
 {
    if (jj_3R_Block_1808_3_90()) return true;
    return false;
  }

  private boolean jj_3R_MethodDeclaration_1284_5_273()
 {
    if (jj_3R_TypeParameters_1188_4_88()) return true;
    return false;
  }

  private boolean jj_3R_VariableDeclaratorId_1263_25_294()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_MemberValueArrayInitializer_2052_3_126()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MemberValueArrayInitializer_2052_8_175()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_MemberValuePairs_2030_24_155()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_MemberValuePair_2036_5_154()) return true;
    return false;
  }

  private boolean jj_3R_MethodDeclaration_1283_3_259()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MethodDeclaration_1284_5_273()) jj_scanpos = xsp;
    if (jj_3R_ResultType_1425_3_79()) return true;
    if (jj_3R_MethodDeclarator_1295_3_274()) return true;
    xsp = jj_scanpos;
    if (jj_3R_MethodDeclaration_1286_24_275()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_MethodDeclaration_1287_5_276()) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) return true;
    }
    return false;
  }

  private boolean jj_3R_ArrayInitializer_1277_9_246()
 {
    if (jj_3R_VariableInitializer_1269_3_66()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_MemberValue_2046_4_113()
 {
    if (jj_3R_ConditionalExpression_1487_3_99()) return true;
    return false;
  }

  private boolean jj_3R_VariableDeclarator_1253_28_285()
 {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_VariableInitializer_1269_3_66()) return true;
    return false;
  }

  private boolean jj_3R_MemberValue_2044_4_112()
 {
    if (jj_3R_MemberValueArrayInitializer_2052_3_126()) return true;
    return false;
  }

  private boolean jj_3R_FieldDeclaration_1247_33_272()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_VariableDeclarator_1253_3_271()) return true;
    return false;
  }

  private boolean jj_3R_ArrayInitializer_1277_3_120()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ArrayInitializer_1277_9_246()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(86)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_MemberValue_2042_4_111()
 {
    if (jj_3R_Annotation_2000_4_87()) return true;
    return false;
  }

  private boolean jj_3R_MemberValue_2042_4_86()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MemberValue_2042_4_111()) {
    jj_scanpos = xsp;
    if (jj_3R_MemberValue_2044_4_112()) {
    jj_scanpos = xsp;
    if (jj_3R_MemberValue_2046_4_113()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_VariableInitializer_1271_3_92()
 {
    if (jj_3R_Expression_1471_3_71()) return true;
    return false;
  }

  private boolean jj_3R_MemberValuePair_2036_5_154()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_MemberValue_2042_4_86()) return true;
    return false;
  }

  private boolean jj_3R_VariableInitializer_1269_3_91()
 {
    if (jj_3R_ArrayInitializer_1277_3_120()) return true;
    return false;
  }

  private boolean jj_3R_null_1232_40_64()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_VariableInitializer_1269_3_66()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_VariableInitializer_1269_3_91()) {
    jj_scanpos = xsp;
    if (jj_3R_VariableInitializer_1271_3_92()) return true;
    }
    return false;
  }

  private boolean jj_3R_MemberValuePairs_2030_4_145()
 {
    if (jj_3R_MemberValuePair_2036_5_154()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_MemberValuePairs_2030_24_155()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_NormalAnnotation_2012_21_136()
 {
    if (jj_3R_MemberValuePairs_2030_4_145()) return true;
    return false;
  }

  private boolean jj_3R_null_2000_32_85()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_VariableDeclaratorId_1261_3_284()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_VariableDeclaratorId_1263_25_294()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_SingleMemberAnnotation_2024_3_128()
 {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_Name_1439_3_84()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_MemberValue_2042_4_86()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_VariableDeclarator_1253_3_271()
 {
    if (jj_3R_VariableDeclaratorId_1261_3_284()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_VariableDeclarator_1253_28_285()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_MarkerAnnotation_2018_3_129()
 {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_Name_1439_3_84()) return true;
    return false;
  }

  private boolean jj_3_42()
 {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_Name_1439_3_84()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_Type_1353_4_63()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_null_1232_40_64()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_FieldDeclaration_1246_3_258()
 {
    if (jj_3R_Type_1353_4_63()) return true;
    if (jj_3R_VariableDeclarator_1253_3_271()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_FieldDeclaration_1247_33_272()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_null_1229_20_62()
 {
    if (jj_3R_TypeParameters_1188_4_88()) return true;
    return false;
  }

  private boolean jj_3R_NormalAnnotation_2012_4_127()
 {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_Name_1439_3_84()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_NormalAnnotation_2012_21_136()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_41()
 {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_Name_1439_3_84()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_2000_32_85()) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) return true;
    }
    return false;
  }

  private boolean jj_3_4()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_1229_20_62()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceBodyDeclaration_1237_7_255()
 {
    if (jj_3R_AnnotationTypeDeclaration_2061_3_260()) return true;
    return false;
  }

  private boolean jj_3R_Annotation_2006_4_116()
 {
    if (jj_3R_MarkerAnnotation_2018_3_129()) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceBodyDeclaration_1235_7_254()
 {
    if (jj_3R_MethodDeclaration_1283_3_259()) return true;
    return false;
  }

  private boolean jj_3R_Annotation_2003_4_115()
 {
    if (jj_3R_SingleMemberAnnotation_2024_3_128()) return true;
    return false;
  }

  private boolean jj_3R_TypeBound_1200_39_146()
 {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_ClassOrInterfaceType_1371_3_78()) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceBodyDeclaration_1232_7_253()
 {
    if (jj_3R_FieldDeclaration_1246_3_258()) return true;
    return false;
  }

  private boolean jj_3R_Annotation_2000_4_114()
 {
    if (jj_3R_NormalAnnotation_2012_4_127()) return true;
    return false;
  }

  private boolean jj_3R_RSIGNEDSHIFT_1989_15_100()
 {
    return false;
  }

  private boolean jj_3R_Annotation_2000_4_87()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Annotation_2000_4_114()) {
    jj_scanpos = xsp;
    if (jj_3R_Annotation_2003_4_115()) {
    jj_scanpos = xsp;
    if (jj_3R_Annotation_2006_4_116()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceBodyDeclaration_1229_7_252()
 {
    if (jj_3R_ConstructorDeclaration_1321_3_257()) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceBodyDeclaration_1227_7_251()
 {
    if (jj_3R_EnumDeclaration_1164_3_256()) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceBodyDeclaration_1225_7_250()
 {
    if (jj_3R_ClassOrInterfaceDeclaration_1126_3_149()) return true;
    return false;
  }

  private boolean jj_3R_EnumConstant_1182_46_297()
 {
    if (jj_3R_ClassOrInterfaceBody_1206_3_245()) return true;
    return false;
  }

  private boolean jj_3R_RUNSIGNEDSHIFT_1980_15_101()
 {
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceBodyDeclaration_1222_3_249()
 {
    if (jj_3R_Modifiers_1065_2_83()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ClassOrInterfaceBodyDeclaration_1225_7_250()) {
    jj_scanpos = xsp;
    if (jj_3R_ClassOrInterfaceBodyDeclaration_1227_7_251()) {
    jj_scanpos = xsp;
    if (jj_3R_ClassOrInterfaceBodyDeclaration_1229_7_252()) {
    jj_scanpos = xsp;
    if (jj_3R_ClassOrInterfaceBodyDeclaration_1232_7_253()) {
    jj_scanpos = xsp;
    if (jj_3R_ClassOrInterfaceBodyDeclaration_1235_7_254()) {
    jj_scanpos = xsp;
    if (jj_3R_ClassOrInterfaceBodyDeclaration_1237_7_255()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_RSIGNEDSHIFT_1989_3_72()
 {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == GT &&
                ((MyToken)getToken(1)).realKind == RSIGNEDSHIFT;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_RSIGNEDSHIFT_1989_15_100()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_Initializer_1342_3_65()) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceBodyDeclaration_1215_3_248()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_ClassOrInterfaceBodyDeclaration_1222_3_249()) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_RUNSIGNEDSHIFT_1980_3_73()
 {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == GT &&
                ((MyToken)getToken(1)).realKind == RUNSIGNEDSHIFT;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_RUNSIGNEDSHIFT_1980_15_101()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceBody_1206_9_247()
 {
    if (jj_3R_ClassOrInterfaceBodyDeclaration_1215_3_248()) return true;
    return false;
  }

  private boolean jj_3R_TypeParameters_1188_26_118()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_TypeParameter_1194_4_117()) return true;
    return false;
  }

  private boolean jj_3R_TypeParameter_1194_19_130()
 {
    if (jj_3R_TypeBound_1200_4_137()) return true;
    return false;
  }

  private boolean jj_3R_EnumConstant_1182_30_296()
 {
    if (jj_3R_Arguments_1715_3_95()) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceBody_1206_3_245()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ClassOrInterfaceBody_1206_9_247()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_TryStatement_1970_5_315()
 {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_Block_1808_3_90()) return true;
    return false;
  }

  private boolean jj_3R_TryStatement_1969_5_314()
 {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_FormalParameter_1312_3_291()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_Block_1808_3_90()) return true;
    return false;
  }

  private boolean jj_3R_TypeBound_1200_4_137()
 {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_ClassOrInterfaceType_1371_3_78()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_TypeBound_1200_39_146()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_TryStatement_1968_3_189()
 {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_Block_1808_3_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_TryStatement_1969_5_314()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_TryStatement_1970_5_315()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_TypeParameter_1194_4_117()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TypeParameter_1194_19_130()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_EnumConstant_1182_3_61()) return true;
    return false;
  }

  private boolean jj_3R_SynchronizedStatement_1958_3_188()
 {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_1471_3_71()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_Block_1808_3_90()) return true;
    return false;
  }

  private boolean jj_3R_ReturnStatement_1946_14_313()
 {
    if (jj_3R_Expression_1471_3_71()) return true;
    return false;
  }

  private boolean jj_3R_TypeParameters_1188_4_88()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_TypeParameter_1194_4_117()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_TypeParameters_1188_26_118()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_ThrowStatement_1952_3_187()
 {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_Expression_1471_3_71()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_EnumBody_1175_12_290()
 {
    if (jj_3R_ClassOrInterfaceBodyDeclaration_1215_3_248()) return true;
    return false;
  }

  private boolean jj_3R_EnumConstant_1182_3_61()
 {
    if (jj_3R_Modifiers_1065_2_83()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_EnumConstant_1182_30_296()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_EnumConstant_1182_46_297()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ForStatement_1904_47_322()
 {
    if (jj_3R_ForUpdate_1928_3_327()) return true;
    return false;
  }

  private boolean jj_3R_StatementExpressionList_1922_27_331()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_StatementExpression_1842_3_178()) return true;
    return false;
  }

  private boolean jj_3R_ReturnStatement_1946_3_186()
 {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ReturnStatement_1946_14_313()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_EnumBody_1175_6_281()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_EnumBody_1175_12_290()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_EnumBody_1173_6_280()
 {
    if (jj_3R_EnumConstant_1182_3_61()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_EnumBody_1172_4_265()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_EnumBody_1173_6_280()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(86)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_EnumBody_1175_6_281()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_ContinueStatement_1940_3_185()
 {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_EnumDeclaration_1165_5_264()
 {
    if (jj_3R_ImplementsList_1153_4_279()) return true;
    return false;
  }

  private boolean jj_3R_BreakStatement_1934_3_184()
 {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_EnumDeclaration_1164_3_256()
 {
    if (jj_scan_token(ENUM)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_EnumDeclaration_1165_5_264()) jj_scanpos = xsp;
    if (jj_3R_EnumBody_1172_4_265()) return true;
    return false;
  }

  private boolean jj_3R_ForUpdate_1928_3_327()
 {
    if (jj_3R_StatementExpressionList_1922_3_330()) return true;
    return false;
  }

  private boolean jj_3R_ForStatement_1904_26_321()
 {
    if (jj_3R_Expression_1471_3_71()) return true;
    return false;
  }

  private boolean jj_3R_ImplementsList_1154_6_289()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ClassOrInterfaceType_1371_3_78()) return true;
    return false;
  }

  private boolean jj_3_40()
 {
    if (jj_3R_Modifiers_1065_2_83()) return true;
    if (jj_3R_Type_1353_4_63()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_StatementExpressionList_1922_3_330()
 {
    if (jj_3R_StatementExpression_1842_3_178()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_StatementExpressionList_1922_27_331()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ImplementsList_1153_4_279()
 {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_ClassOrInterfaceType_1371_3_78()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ImplementsList_1154_6_289()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_IfStatement_1880_43_310()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_Statement_1759_3_148()) return true;
    return false;
  }

  private boolean jj_3R_ForInit_1916_3_329()
 {
    if (jj_3R_StatementExpressionList_1922_3_330()) return true;
    return false;
  }

  private boolean jj_3_39()
 {
    if (jj_3R_Modifiers_1065_2_83()) return true;
    if (jj_3R_Type_1353_4_63()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_ForInit_1913_3_328()
 {
    if (jj_3R_LocalVariableDeclaration_1825_3_147()) return true;
    return false;
  }

  private boolean jj_3R_ForInit_1913_3_326()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ForInit_1913_3_328()) {
    jj_scanpos = xsp;
    if (jj_3R_ForInit_1916_3_329()) return true;
    }
    return false;
  }

  private boolean jj_3R_ExtendsList_1143_6_288()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_ClassOrInterfaceType_1371_3_78()) return true;
    return false;
  }

  private boolean jj_3R_ExtendsList_1142_4_278()
 {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_ClassOrInterfaceType_1371_3_78()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExtendsList_1143_6_288()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ForStatement_1904_8_320()
 {
    if (jj_3R_ForInit_1913_3_326()) return true;
    return false;
  }

  private boolean jj_3R_ForStatement_1904_6_312()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ForStatement_1904_8_320()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_ForStatement_1904_26_321()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_ForStatement_1904_47_322()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ForStatement_1901_7_311()
 {
    if (jj_3R_Modifiers_1065_2_83()) return true;
    if (jj_3R_Type_1353_4_63()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_Expression_1471_3_71()) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceDeclaration_1126_15_171()
 {
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceDeclaration_1132_5_263()
 {
    if (jj_3R_ImplementsList_1153_4_279()) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceDeclaration_1131_5_262()
 {
    if (jj_3R_ExtendsList_1142_4_278()) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceDeclaration_1130_5_261()
 {
    if (jj_3R_TypeParameters_1188_4_88()) return true;
    return false;
  }

  private boolean jj_3R_ForStatement_1898_3_183()
 {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ForStatement_1901_7_311()) {
    jj_scanpos = xsp;
    if (jj_3R_ForStatement_1904_6_312()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_Statement_1759_3_148()) return true;
    return false;
  }

  private boolean jj_3R_ClassOrInterfaceDeclaration_1126_3_149()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_3R_ClassOrInterfaceDeclaration_1126_15_171()) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3R_ClassOrInterfaceDeclaration_1130_5_261()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_ClassOrInterfaceDeclaration_1131_5_262()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_ClassOrInterfaceDeclaration_1132_5_263()) jj_scanpos = xsp;
    if (jj_3R_ClassOrInterfaceBody_1206_3_245()) return true;
    return false;
  }

  private boolean jj_3R_DoStatement_1892_3_182()
 {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_Statement_1759_3_148()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_1471_3_71()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_WhileStatement_1886_3_181()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_1471_3_71()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_Statement_1759_3_148()) return true;
    return false;
  }

  private boolean jj_3R_SwitchStatement_1860_23_319()
 {
    if (jj_3R_BlockStatement_1814_3_131()) return true;
    return false;
  }

  private boolean jj_3R_IfStatement_1880_3_180()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_1471_3_71()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_Statement_1759_3_148()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_IfStatement_1880_43_310()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_SwitchLabel_1869_3_325()
 {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_SwitchLabel_1867_3_324()
 {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_Expression_1471_3_71()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_SwitchLabel_1867_3_318()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SwitchLabel_1867_3_324()) {
    jj_scanpos = xsp;
    if (jj_3R_SwitchLabel_1869_3_325()) return true;
    }
    return false;
  }

  private boolean jj_3R_LocalVariableDeclaration_1825_45_300()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_VariableDeclarator_1253_3_271()) return true;
    return false;
  }

  private boolean jj_3R_SwitchStatement_1860_7_309()
 {
    if (jj_3R_SwitchLabel_1867_3_318()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_SwitchStatement_1860_23_319()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_SwitchStatement_1859_3_179()
 {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_1471_3_71()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_SwitchStatement_1860_7_309()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_Modifiers_1090_4_60()
 {
    if (jj_3R_Annotation_2000_4_87()) return true;
    return false;
  }

  private boolean jj_3R_Modifiers_1088_4_59()
 {
    if (jj_scan_token(STRICTFP)) return true;
    return false;
  }

  private boolean jj_3R_StatementExpression_1852_5_323()
 {
    if (jj_3R_AssignmentOperator_1481_3_70()) return true;
    if (jj_3R_Expression_1471_3_71()) return true;
    return false;
  }

  private boolean jj_3R_Modifiers_1086_4_58()
 {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  private boolean jj_3R_Modifiers_1084_4_57()
 {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  private boolean jj_3R_StatementExpression_1848_5_317()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_3R_StatementExpression_1852_5_323()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_Modifiers_1082_4_56()
 {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  private boolean jj_3R_Modifiers_1080_4_55()
 {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  private boolean jj_3R_Modifiers_1078_4_54()
 {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_StatementExpression_1846_3_196()
 {
    if (jj_3R_PrimaryExpression_1624_3_201()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_StatementExpression_1848_5_317()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_Modifiers_1076_4_53()
 {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3R_StatementExpression_1844_3_195()
 {
    if (jj_3R_PreDecrementExpression_1577_3_200()) return true;
    return false;
  }

  private boolean jj_3R_Modifiers_1074_4_52()
 {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_StatementExpression_1842_3_178()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_StatementExpression_1842_3_194()) {
    jj_scanpos = xsp;
    if (jj_3R_StatementExpression_1844_3_195()) {
    jj_scanpos = xsp;
    if (jj_3R_StatementExpression_1846_3_196()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_StatementExpression_1842_3_194()
 {
    if (jj_3R_PreIncrementExpression_1571_3_199()) return true;
    return false;
  }

  private boolean jj_3R_Modifiers_1072_4_51()
 {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_Modifiers_1070_4_50()
 {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_Modifiers_1068_4_49()
 {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Modifiers_1068_4_49()) {
    jj_scanpos = xsp;
    if (jj_3R_Modifiers_1070_4_50()) {
    jj_scanpos = xsp;
    if (jj_3R_Modifiers_1072_4_51()) {
    jj_scanpos = xsp;
    if (jj_3R_Modifiers_1074_4_52()) {
    jj_scanpos = xsp;
    if (jj_3R_Modifiers_1076_4_53()) {
    jj_scanpos = xsp;
    if (jj_3R_Modifiers_1078_4_54()) {
    jj_scanpos = xsp;
    if (jj_3R_Modifiers_1080_4_55()) {
    jj_scanpos = xsp;
    if (jj_3R_Modifiers_1082_4_56()) {
    jj_scanpos = xsp;
    if (jj_3R_Modifiers_1084_4_57()) {
    jj_scanpos = xsp;
    if (jj_3R_Modifiers_1086_4_58()) {
    jj_scanpos = xsp;
    if (jj_3R_Modifiers_1088_4_59()) {
    jj_scanpos = xsp;
    if (jj_3R_Modifiers_1090_4_60()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_Modifiers_1065_2_83()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_EmptyStatement_1831_3_177()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_38()
 {
    if (jj_3R_Modifiers_1065_2_83()) return true;
    if (jj_3R_Type_1353_4_63()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_LocalVariableDeclaration_1825_3_147()
 {
    if (jj_3R_Modifiers_1065_2_83()) return true;
    if (jj_3R_Type_1353_4_63()) return true;
    if (jj_3R_VariableDeclarator_1253_3_271()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_LocalVariableDeclaration_1825_45_300()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_AssertStatement_1796_27_308()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_Expression_1471_3_71()) return true;
    return false;
  }

  private boolean jj_3R_BlockStatement_1819_3_140()
 {
    if (jj_3R_ClassOrInterfaceDeclaration_1126_3_149()) return true;
    return false;
  }

  private boolean jj_3R_BlockStatement_1817_3_139()
 {
    if (jj_3R_Statement_1759_3_148()) return true;
    return false;
  }

  private boolean jj_3R_BlockStatement_1814_3_138()
 {
    if (jj_3R_LocalVariableDeclaration_1825_3_147()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_BlockStatement_1814_3_131()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_BlockStatement_1814_3_138()) {
    jj_scanpos = xsp;
    if (jj_3R_BlockStatement_1817_3_139()) {
    jj_scanpos = xsp;
    if (jj_3R_BlockStatement_1819_3_140()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_Block_1808_9_119()
 {
    if (jj_3R_BlockStatement_1814_3_131()) return true;
    return false;
  }

  private boolean jj_3R_null_1030_18_48()
 {
    if (jj_3R_Annotation_2000_4_87()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_null_1030_18_48()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PACKAGE)) return true;
    return false;
  }

  private boolean jj_3R_Block_1808_3_90()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Block_1808_9_119()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_LabeledStatement_1802_3_82()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_Statement_1759_3_148()) return true;
    return false;
  }

  private boolean jj_3R_AssertStatement_1796_3_176()
 {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_3R_Expression_1471_3_71()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AssertStatement_1796_27_308()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_Statement_1790_3_170()
 {
    if (jj_3R_TryStatement_1968_3_189()) return true;
    return false;
  }

  private boolean jj_3R_Statement_1788_3_169()
 {
    if (jj_3R_SynchronizedStatement_1958_3_188()) return true;
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_Statement_1786_3_168()
 {
    if (jj_3R_ThrowStatement_1952_3_187()) return true;
    return false;
  }

  private boolean jj_3R_Statement_1784_3_167()
 {
    if (jj_3R_ReturnStatement_1946_3_186()) return true;
    return false;
  }

  private boolean jj_3R_Statement_1782_3_166()
 {
    if (jj_3R_ContinueStatement_1940_3_185()) return true;
    return false;
  }

  private boolean jj_3R_Statement_1780_3_165()
 {
    if (jj_3R_BreakStatement_1934_3_184()) return true;
    return false;
  }

  private boolean jj_3R_Statement_1778_3_164()
 {
    if (jj_3R_ForStatement_1898_3_183()) return true;
    return false;
  }

  private boolean jj_3R_Statement_1776_3_163()
 {
    if (jj_3R_DoStatement_1892_3_182()) return true;
    return false;
  }

  private boolean jj_3R_Statement_1774_3_162()
 {
    if (jj_3R_WhileStatement_1886_3_181()) return true;
    return false;
  }

  private boolean jj_3R_Statement_1772_3_161()
 {
    if (jj_3R_IfStatement_1880_3_180()) return true;
    return false;
  }

  private boolean jj_3R_Statement_1770_3_160()
 {
    if (jj_3R_SwitchStatement_1859_3_179()) return true;
    return false;
  }

  private boolean jj_3R_Statement_1768_3_159()
 {
    if (jj_3R_StatementExpression_1842_3_178()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_Statement_1766_3_158()
 {
    if (jj_3R_EmptyStatement_1831_3_177()) return true;
    return false;
  }

  private boolean jj_3R_Statement_1764_3_157()
 {
    if (jj_3R_Block_1808_3_90()) return true;
    return false;
  }

  private boolean jj_3R_Statement_1762_3_156()
 {
    if (jj_3R_AssertStatement_1796_3_176()) return true;
    return false;
  }

  private boolean jj_3R_AllocationExpression_1730_34_239()
 {
    if (jj_3R_TypeArguments_1382_4_69()) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_3R_LabeledStatement_1802_3_82()) return true;
    return false;
  }

  private boolean jj_3R_Statement_1759_3_148()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_1762_3_156()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_1764_3_157()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_1766_3_158()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_1768_3_159()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_1770_3_160()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_1772_3_161()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_1774_3_162()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_1776_3_163()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_1778_3_164()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_1780_3_165()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_1782_3_166()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_1784_3_167()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_1786_3_168()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_1788_3_169()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_1790_3_170()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_AllocationExpression_1734_21_243()
 {
    if (jj_3R_ClassOrInterfaceBody_1206_3_245()) return true;
    return false;
  }

  private boolean jj_3R_ArrayDimsAndInits_1748_5_244()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Expression_1471_3_71()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_ArrayDimsAndInits_1748_3_242()
 {
    Token xsp;
    if (jj_3R_ArrayDimsAndInits_1748_5_244()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ArrayDimsAndInits_1748_5_244()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_ArrayInitializer_1277_3_120()) return true;
    return false;
  }

  private boolean jj_3_36()
 {
    Token xsp;
    if (jj_3_34()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_34()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ArrayDimsAndInits_1745_3_238()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3R_ArrayDimsAndInits_1748_3_242()) return true;
    }
    return false;
  }

  private boolean jj_3R_AllocationExpression_1734_7_241()
 {
    if (jj_3R_Arguments_1715_3_95()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AllocationExpression_1734_21_243()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ArgumentList_1721_18_141()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Expression_1471_3_71()) return true;
    return false;
  }

  private boolean jj_3R_AllocationExpression_1732_7_240()
 {
    if (jj_3R_ArrayDimsAndInits_1745_3_238()) return true;
    return false;
  }

  private boolean jj_3R_AllocationExpression_1730_3_110()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_ClassOrInterfaceType_1371_3_78()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AllocationExpression_1730_34_239()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_AllocationExpression_1732_7_240()) {
    jj_scanpos = xsp;
    if (jj_3R_AllocationExpression_1734_7_241()) return true;
    }
    return false;
  }

  private boolean jj_3R_AllocationExpression_1727_3_80()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3R_AllocationExpression_1730_3_110()) return true;
    }
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_PrimitiveType_1405_3_75()) return true;
    if (jj_3R_ArrayDimsAndInits_1745_3_238()) return true;
    return false;
  }

  private boolean jj_3R_ArgumentList_1721_3_133()
 {
    if (jj_3R_Expression_1471_3_71()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ArgumentList_1721_18_141()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Arguments_1715_9_121()
 {
    if (jj_3R_ArgumentList_1721_3_133()) return true;
    return false;
  }

  private boolean jj_3R_Arguments_1715_3_95()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Arguments_1715_9_121()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_NullLiteral_1709_3_153()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_BooleanLiteral_1701_3_152()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    return false;
  }

  private boolean jj_3R_Literal_1695_3_144()
 {
    if (jj_3R_NullLiteral_1709_3_153()) return true;
    return false;
  }

  private boolean jj_3R_Literal_1693_3_143()
 {
    if (jj_3R_BooleanLiteral_1701_3_152()) return true;
    return false;
  }

  private boolean jj_3R_Literal_1685_3_135()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_3R_Literal_1693_3_143()) {
    jj_scanpos = xsp;
    if (jj_3R_Literal_1695_3_144()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_CastLookahead_1603_80_125()
 {
    if (jj_3R_Literal_1685_3_135()) return true;
    return false;
  }

  private boolean jj_3R_PrimarySuffix_1679_3_108()
 {
    if (jj_3R_Arguments_1715_3_95()) return true;
    return false;
  }

  private boolean jj_3R_PrimarySuffix_1677_3_107()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_PrimarySuffix_1675_3_106()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Expression_1471_3_71()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_3R_MemberSelector_1630_3_81()) return true;
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_AllocationExpression_1727_3_80()) return true;
    return false;
  }

  private boolean jj_3R_PrimarySuffix_1666_3_105()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_3R_ResultType_1425_3_79()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_PrimarySuffix_1663_3_104()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  private boolean jj_3R_PrimarySuffix_1663_3_76()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PrimarySuffix_1663_3_104()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimarySuffix_1666_3_105()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimarySuffix_1675_3_106()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimarySuffix_1677_3_107()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimarySuffix_1679_3_108()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_3R_ClassOrInterfaceType_1371_3_78()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_PrimaryPrefix_1657_3_214()
 {
    if (jj_3R_Name_1439_3_84()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryPrefix_1654_3_213()
 {
    if (jj_3R_ResultType_1425_3_79()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_PrimaryPrefix_1652_3_212()
 {
    if (jj_3R_AllocationExpression_1727_3_80()) return true;
    return false;
  }

  private boolean jj_3R_null_1638_16_77()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_PrimaryPrefix_1650_3_211()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_1471_3_71()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_null_1638_16_77()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_PrimaryPrefix_1647_4_210()
 {
    if (jj_3R_ClassOrInterfaceType_1371_3_78()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_3R_PrimarySuffix_1663_3_76()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryPrefix_1642_3_209()
 {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_PrimaryPrefix_1639_5_217()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_PrimaryPrefix_1638_3_208()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_PrimaryPrefix_1639_5_217()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_PrimaryPrefix_1636_3_204()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PrimaryPrefix_1636_3_207()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryPrefix_1638_3_208()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryPrefix_1642_3_209()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryPrefix_1647_4_210()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryPrefix_1650_3_211()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryPrefix_1652_3_212()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryPrefix_1654_3_213()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryPrefix_1657_3_214()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_PrimaryPrefix_1636_3_207()
 {
    if (jj_3R_Literal_1685_3_135()) return true;
    return false;
  }

  private boolean jj_3R_PostfixExpression_1609_25_237()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    return false;
  }

  private boolean jj_3R_MemberSelector_1630_3_81()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_TypeArguments_1382_4_69()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_PrimitiveType_1405_3_75()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryExpression_1624_3_201()
 {
    if (jj_3R_PrimaryPrefix_1636_3_204()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_CastExpression_1618_3_236()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Type_1353_4_63()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_UnaryExpressionNotPlusMinus_1583_3_227()) return true;
    return false;
  }

  private boolean jj_3R_CastExpression_1615_3_233()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CastExpression_1615_3_235()) {
    jj_scanpos = xsp;
    if (jj_3R_CastExpression_1618_3_236()) return true;
    }
    return false;
  }

  private boolean jj_3R_CastExpression_1615_3_235()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Type_1353_4_63()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_UnaryExpression_1559_3_221()) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Type_1353_4_63()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_PostfixExpression_1609_3_234()
 {
    if (jj_3R_PrimaryExpression_1624_3_201()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PostfixExpression_1609_25_237()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_CastLookahead_1603_3_103()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Type_1353_4_63()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_3R_CastLookahead_1603_80_125()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_CastLookahead_1600_3_102()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Type_1353_4_63()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_PrimitiveType_1405_3_75()) return true;
    return false;
  }

  private boolean jj_3R_CastLookahead_1597_3_74()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_CastLookahead_1600_3_102()) {
    jj_scanpos = xsp;
    if (jj_3R_CastLookahead_1603_3_103()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_CastLookahead_1597_3_74()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_RUNSIGNEDSHIFT_1980_3_73()) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpressionNotPlusMinus_1588_3_231()
 {
    if (jj_3R_PostfixExpression_1609_3_234()) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpressionNotPlusMinus_1585_3_230()
 {
    if (jj_3R_CastExpression_1615_3_233()) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpressionNotPlusMinus_1583_3_227()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_UnaryExpressionNotPlusMinus_1583_3_229()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryExpressionNotPlusMinus_1585_3_230()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryExpressionNotPlusMinus_1588_3_231()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_UnaryExpressionNotPlusMinus_1583_3_229()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    }
    if (jj_3R_UnaryExpression_1559_3_221()) return true;
    return false;
  }

  private boolean jj_3R_PreDecrementExpression_1577_3_200()
 {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_PrimaryExpression_1624_3_201()) return true;
    return false;
  }

  private boolean jj_3R_AdditiveExpression_1547_32_228()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    if (jj_3R_MultiplicativeExpression_1553_3_219()) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_RSIGNEDSHIFT_1989_3_72()) return true;
    return false;
  }

  private boolean jj_3R_MultiplicativeExpression_1553_23_232()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) return true;
    }
    }
    if (jj_3R_UnaryExpression_1559_3_221()) return true;
    return false;
  }

  private boolean jj_3R_PreIncrementExpression_1571_3_199()
 {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_PrimaryExpression_1624_3_201()) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_1565_3_226()
 {
    if (jj_3R_UnaryExpressionNotPlusMinus_1583_3_227()) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    }
    if (jj_3R_AdditiveExpression_1547_3_216()) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_1563_3_225()
 {
    if (jj_3R_PreDecrementExpression_1577_3_200()) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_1561_3_224()
 {
    if (jj_3R_PreIncrementExpression_1571_3_199()) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_1559_3_221()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_UnaryExpression_1559_3_223()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryExpression_1561_3_224()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryExpression_1563_3_225()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryExpression_1565_3_226()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_UnaryExpression_1559_3_223()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    if (jj_3R_UnaryExpression_1559_3_221()) return true;
    return false;
  }

  private boolean jj_3R_RelationalExpression_1535_23_222()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) return true;
    }
    }
    }
    if (jj_3R_ShiftExpression_1541_3_206()) return true;
    return false;
  }

  private boolean jj_3R_InstanceOfExpression_1529_28_220()
 {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_Type_1353_4_63()) return true;
    return false;
  }

  private boolean jj_3R_MultiplicativeExpression_1553_3_219()
 {
    if (jj_3R_UnaryExpression_1559_3_221()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_MultiplicativeExpression_1553_23_232()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_EqualityExpression_1523_28_218()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) return true;
    }
    if (jj_3R_InstanceOfExpression_1529_3_198()) return true;
    return false;
  }

  private boolean jj_3R_AdditiveExpression_1547_3_216()
 {
    if (jj_3R_MultiplicativeExpression_1553_3_219()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_AdditiveExpression_1547_32_228()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ShiftExpression_1541_3_206()
 {
    if (jj_3R_AdditiveExpression_1547_3_216()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_AndExpression_1517_26_215()
 {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_EqualityExpression_1523_3_193()) return true;
    return false;
  }

  private boolean jj_3R_RelationalExpression_1535_3_203()
 {
    if (jj_3R_ShiftExpression_1541_3_206()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_RelationalExpression_1535_23_222()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_InclusiveOrExpression_1505_29_202()
 {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_ExclusiveOrExpression_1511_3_151()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public JavaParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;

  /** Constructor with InputStream. */
  public JavaParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JavaParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new JavaParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
  }

  /** Constructor. */
  public JavaParser(java.io.Reader stream) {
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new JavaParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new JavaParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
  }

  /** Constructor with generated Token Manager. */
  public JavaParser(JavaParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(JavaParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   return token;
	 }
	 token = oldToken;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = jj_lookingAhead ? jj_scanpos : token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 Token errortok = token.next;
	 int line = errortok.beginLine, column = errortok.beginColumn;
	 String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
	 return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
